diff --git a/include/cef_life_span_handler.h b/include/cef_life_span_handler.h
index 70bd70f..08b1d52 100644
--- a/include/cef_life_span_handler.h
+++ b/include/cef_life_span_handler.h
@@ -53,6 +53,11 @@ class CefLifeSpanHandler : public virtual CefBase {
  public:
   typedef cef_window_open_disposition_t WindowOpenDisposition;
 
+  // Called after new internal window created and not mapped for now.
+  ///
+  /*--cef()--*/
+  virtual void OnWindowCreated(CefRefPtr<CefBrowser> browser) {}
+
   ///
   // Called on the IO thread before a new popup browser is created. The
   // |browser| and |frame| values represent the source of the popup request. The
@@ -99,6 +104,11 @@ class CefLifeSpanHandler : public virtual CefBase {
   /*--cef()--*/
   virtual bool RunModal(CefRefPtr<CefBrowser> browser) { return false; }
 
+  // Called before proccessing CloseBrowser
+  ///
+  /*--cef()--*/
+  virtual bool OnCloseBrowser(CefRefPtr<CefBrowser> browser) { return false; }
+
   ///
   // Called when a browser has recieved a request to close. This may result
   // directly from a call to CefBrowserHost::CloseBrowser() or indirectly if the
@@ -138,21 +148,22 @@ class CefLifeSpanHandler : public virtual CefBase {
   // 2.  Application's top-level window receives the close notification and:
   //     A. Calls CefBrowserHost::CloseBrowser(false).
   //     B. Cancels the window close.
-  // 3.  JavaScript 'onbeforeunload' handler executes and shows the close
+  // 3.  Application's OnBrowserClose() handler is called
+  // 4.  JavaScript 'onbeforeunload' handler executes and shows the close
   //     confirmation dialog (which can be overridden via
   //     CefJSDialogHandler::OnBeforeUnloadDialog()).
-  // 4.  User approves the close.
-  // 5.  JavaScript 'onunload' handler executes.
-  // 6.  Application's DoClose() handler is called. Application will:
+  // 5.  User approves the close.
+  // 6.  JavaScript 'onunload' handler executes.
+  // 7.  Application's DoClose() handler is called. Application will:
   //     A. Set a flag to indicate that the next close attempt will be allowed.
   //     B. Return false.
-  // 7.  CEF sends an OS close notification.
-  // 8.  Application's top-level window receives the OS close notification and
+  // 8.  CEF sends an OS close notification.
+  // 9.  Application's top-level window receives the OS close notification and
   //     allows the window to close based on the flag from #6B.
-  // 9.  Browser OS window is destroyed.
-  // 10. Application's CefLifeSpanHandler::OnBeforeClose() handler is called and
+  // 10.  Browser OS window is destroyed.
+  // 11. Application's CefLifeSpanHandler::OnBeforeClose() handler is called and
   //     the browser object is destroyed.
-  // 11. Application exits by calling CefQuitMessageLoop() if no other browsers
+  // 12. Application exits by calling CefQuitMessageLoop() if no other browsers
   //     exist.
   ///
   /*--cef()--*/
diff --git a/libcef/browser/browser_host_impl.cc b/libcef/browser/browser_host_impl.cc
index 0ee8366..c5540c8 100644
--- a/libcef/browser/browser_host_impl.cc
+++ b/libcef/browser/browser_host_impl.cc
@@ -668,7 +668,12 @@ void CefBrowserHostImpl::CloseBrowser(bool force_close) {
     }
 
     content::WebContents* contents = web_contents();
-    if (contents && contents->NeedToFireBeforeUnload()) {
+    if (!force_close  && OnCloseBrowser(contents)) {
+      // CloseBrowser handled in other way...
+      if (destruction_state_ != DESTRUCTION_STATE_NONE) {
+        destruction_state_ = DESTRUCTION_STATE_NONE;
+      }
+    } else if (contents && contents->NeedToFireBeforeUnload()) {
       // Will result in a call to BeforeUnloadFired() and, if the close isn't
       // canceled, CloseContents().
       contents->DispatchBeforeUnload(false);
@@ -2097,6 +2102,24 @@ void CefBrowserHostImpl::LoadingStateChanged(content::WebContents* source,
   }
 }
 
+bool CefBrowserHostImpl::OnCloseBrowser(content::WebContents* source) {
+  bool handled = false;
+  if (destruction_state_ == DESTRUCTION_STATE_COMPLETED)
+    return handled;
+
+  // If this method is called in response to something other than
+  // WindowDestroyed() ask the user if the browser should close.
+  if (client_.get() && (IsWindowless() || !window_destroyed_)) {
+    CefRefPtr<CefLifeSpanHandler> handler =
+        client_->GetLifeSpanHandler();
+    if (handler.get()) {
+      handled = handler->OnCloseBrowser(this);
+    }
+  }
+
+  return handled;
+}
+
 void CefBrowserHostImpl::CloseContents(content::WebContents* source) {
   if (destruction_state_ == DESTRUCTION_STATE_COMPLETED)
     return;
diff --git a/libcef/browser/browser_host_impl.h b/libcef/browser/browser_host_impl.h
index ad5fe9e..14d7330 100644
--- a/libcef/browser/browser_host_impl.h
+++ b/libcef/browser/browser_host_impl.h
@@ -570,6 +570,7 @@ class CefBrowserHostImpl : public CefBrowserHost,
   void OnLoadEnd(CefRefPtr<CefFrame> frame,
                  const GURL& url,
                  int http_status_code);
+  bool OnCloseBrowser(content::WebContents* source);
 
   // Continuation from RunFileChooser.
   void RunFileChooserOnUIThread(const FileChooserParams& params,
diff --git a/libcef/browser/browser_host_impl_linux.cc b/libcef/browser/browser_host_impl_linux.cc
index 39670cf..291f798 100644
--- a/libcef/browser/browser_host_impl_linux.cc
+++ b/libcef/browser/browser_host_impl_linux.cc
@@ -180,6 +180,12 @@ bool CefBrowserHostImpl::PlatformCreateWindow() {
         CefColorGetB(settings.background_color));
   }
 
+  if (client_.get()) {
+    CefRefPtr<CefLifeSpanHandler> handler = client_->GetLifeSpanHandler();
+    if (handler.get())
+      handler->OnWindowCreated(this);
+  }
+
   CefWindowDelegateView* delegate_view =
       new CefWindowDelegateView(background_color);
   delegate_view->Init(window_info_.window,
